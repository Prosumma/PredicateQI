//
//  Comparison.swift
//  PredicateQI
//
//  Created by Gregory Higley on 2022-10-14.
//
%{
comparators = [
  ("equal", "to", ".equalTo", "=="),
  ("notEqual", "to", ".notEqualTo", "!="),
  ("greater", "than", ".greaterThan", ">"),
  ("greaterThanOrEqual", "to", ".greaterThanOrEqualTo", ">="),
  ("less", "than", ".lessThan", "<"),
  ("lessThanOrEqual", "to", ".lessThanOrEqualTo", "<="),
  ("`in`", "_", ".in", "<~|"),
  ("contains", "_", ".contains", "|~>"),
  ("begins", "with", ".beginsWith", "<~%"),
  ("ends", "with", ".endsWith", "%~>"),
  ("like", "_", ".like", "%")
]
}%

// swiftlint:disable opening_brace indentation_width

import Foundation

public func compare<L: Expression, R: Expression>(
  _ lhs: L,
  _ op: NSComparisonPredicate.Operator,
  _ rhs: R
) -> PredicateBuilder {
  return { context in
    let le = lhs.pqiExpression
    let re = rhs.pqiExpression
    return NSComparisonPredicate(
      leftExpression: le,
      rightExpression: re,
      modifier: context.modifier,
      type: op,
      options: context.options
    )
  }
}
% for comparator in comparators:

public func ${comparator[0]}<L, R>(_ lhs: L, ${comparator[1]} rhs: R) -> PredicateBuilder
  where L: Expression & TypeComparable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  compare(lhs, ${comparator[2]}, rhs)
}

public func ${comparator[0]}<L, R>(_ lhs: L, ${comparator[1]} rhs: R) -> PredicateBuilder
  where L: Expression & AnyComparable,
        R: Expression
{
  compare(lhs, ${comparator[2]}, rhs)
}
% if (comparator[0] in ["equal", "notEqual"]):

public func ${comparator[0]}<L: Expression>(_ lhs: L, ${comparator[1]} rhs: Null) -> PredicateBuilder {
  compare(lhs, ${comparator[2]}, rhs)
}
% end
% if comparator[3] is not None:

public func ${comparator[3]} <L, R>(lhs: L, rhs: R) -> PredicateBuilder
  where L: Expression & TypeComparable & Variable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  ${comparator[0]}(lhs, ${comparator[1]}: rhs)
}

public func ${comparator[3]} <L, R>(lhs: L, rhs: R) -> PredicateBuilder
  where L: Expression & AnyComparable & Variable,
        R: Expression
{
  ${comparator[0]}(lhs, ${comparator[1]}: rhs)
}
% if (comparator[0] in ["equal", "notEqual"]):

public func ${comparator[3]} <L: Expression & Variable>(lhs: L, rhs: Null) -> PredicateBuilder {
  compare(lhs, ${comparator[2]}, rhs)
}
% end
% end
% end

public func matches<L, R>(_ lhs: L, _ rhs: R) -> PredicateBuilder
  where L: Expression & TypeComparable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == String,
        R.PQIComparisonType == String
{
  compare(lhs, .matches, rhs)
}

public func matches<L, R>(_ lhs: L, _ rhs: R) -> PredicateBuilder
  where L: Expression & AnyComparable,
        R: Expression & TypeComparable,
        R.PQIComparisonType == String
{
  compare(lhs, .matches, rhs)
}

public func between<L, R>(_ lhs: L, _ rhs: (R, R)) -> PredicateBuilder
  where L: Expression & TypeComparable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  compare(lhs, .between, NSExpression(forAggregate: [rhs.0.pqiExpression, rhs.1.pqiExpression]))
}

public func between<L, R>(_ lhs: L, _ rhs: (R, R)) -> PredicateBuilder
  where L: Expression & AnyComparable,
        R: Expression & TypeComparable
{
  compare(lhs, .between, NSExpression(forAggregate: [rhs.0.pqiExpression, rhs.1.pqiExpression]))
}

public func between<L, R>(_ lhs: L, _ rhs: ClosedRange<R>) -> PredicateBuilder
  where L: Expression & TypeComparable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  compare(lhs, .between, NSExpression(forAggregate: [rhs.lowerBound.pqiExpression, rhs.upperBound.pqiExpression]))
}

public func between<L, R>(_ lhs: L, _ rhs: ClosedRange<R>) -> PredicateBuilder
  where L: Expression & AnyComparable,
        R: Expression & TypeComparable
{
  compare(lhs, .between, NSExpression(forAggregate: [rhs.lowerBound.pqiExpression, rhs.upperBound.pqiExpression]))
}

public func <|> <L, R>(lhs: L, rhs: (R, R)) -> PredicateBuilder
  where L: Expression & TypeComparable & Variable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  between(lhs, rhs)
}

public func <|> <L, R>(lhs: L, rhs: (R, R)) -> PredicateBuilder
  where L: Expression & AnyComparable & Variable,
        R: Expression & TypeComparable
{
  between(lhs, rhs)
}

public func <|> <L, R>(lhs: L, rhs: ClosedRange<R>) -> PredicateBuilder
  where L: Expression & TypeComparable & Variable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  between(lhs, rhs)
}

public func <|> <L, R>(lhs: L, rhs: ClosedRange<R>) -> PredicateBuilder
  where L: Expression & AnyComparable & Variable,
        R: Expression & TypeComparable
{
  between(lhs, rhs)
}
