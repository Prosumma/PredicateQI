//
//  Comparison.swift
//  PredicateQI
//
//  Created by Gregory Higley on 2022-10-14.
//
%{
class Comparator:
  def __init__(self, name, conj, enum, op, type=None):
    self.name = name
    self.conj = conj
    self.enum = enum
    self.op = op
    self.type = type

comparators = [
  Comparator("equal", "to", ".equalTo", "=="),
  Comparator("notEqual", "to", ".notEqualTo", "!="),
  Comparator("greater", "than", ".greaterThan", ">"),
  Comparator("greaterThanOrEqual", "to", ".greaterThanOrEqualTo", ">="),
  Comparator("less", "than", ".lessThan", "<"),
  Comparator("lessThanOrEqual", "to", ".lessThanOrEqualTo", "<="),
  Comparator("`in`", "_", ".in", "<~|"),
  Comparator("contains", "_", ".contains", "|~>"),
  Comparator("begins", "with", ".beginsWith", "<~%", "String"),
  Comparator("ends", "with", ".endsWith", "%~>", "String"),
  Comparator("like", "_", ".like", "%*", "String"),
  Comparator("matches", "_", ".matches", "%~", "String")
]
}%

// swiftlint:disable opening_brace indentation_width

import Foundation

public func compare<L: Expression, R: Expression>(
  _ lhs: L,
  _ op: NSComparisonPredicate.Operator,
  _ rhs: R
) -> PredicateBuilder {
  return { context in
    let le = lhs.pqiExpression
    let re = rhs.pqiExpression
    return NSComparisonPredicate(
      leftExpression: le,
      rightExpression: re,
      modifier: context.modifier,
      type: op,
      options: context.options
    )
  }
}
% for comparator in comparators:

public func ${comparator.name}<L, R>(_ lhs: L, ${comparator.conj} rhs: R) -> PredicateBuilder
  where L: Expression & TypeComparable,
        R: Expression & TypeComparable,
% if comparator.type is not None:
        L.PQIComparisonType == ${comparator.type},
% end
        L.PQIComparisonType == R.PQIComparisonType
{
  compare(lhs, ${comparator.enum}, rhs)
}

public func ${comparator.name}<L, R>(_ lhs: L, ${comparator.conj} rhs: R) -> PredicateBuilder
  where L: Expression & AnyComparable,
% if comparator.type is None:
        R: Expression
% else:
        R: Expression & TypeComparable<${comparator.type}>
% end
{
  compare(lhs, ${comparator.enum}, rhs)
}
% if comparator.name in ["equal", "notEqual"]:

public func ${comparator.name}<L: Expression>(_ lhs: L, ${comparator.conj} rhs: Null) -> PredicateBuilder {
  compare(lhs, ${comparator.enum}, rhs)
}
% end
% if comparator.op is not None:

public func ${comparator.op} <L, R>(lhs: L, rhs: R) -> PredicateBuilder
  where L: Expression & TypeComparable & Variable,
        R: Expression & TypeComparable,
% if comparator.type is not None:
        L.PQIComparisonType == ${comparator.type},
% end
        L.PQIComparisonType == R.PQIComparisonType
{
  ${comparator.name}(lhs, ${comparator.conj}: rhs)
}

public func ${comparator.op} <L, R>(lhs: L, rhs: R) -> PredicateBuilder
  where L: Expression & AnyComparable & Variable,
% if comparator.type is None:
        R: Expression
% else:
        R: Expression & TypeComparable<${comparator.type}>
% end
{
  ${comparator.name}(lhs, ${comparator.conj}: rhs)
}
% if comparator.name in ["equal", "notEqual"]:

public func ${comparator.op} <L: Expression & Variable>(lhs: L, rhs: Null) -> PredicateBuilder {
  compare(lhs, ${comparator.enum}, rhs)
}
% end
% end
% end

public func between<L, R>(_ lhs: L, _ rhs: (R, R)) -> PredicateBuilder
  where L: Expression & TypeComparable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  compare(lhs, .between, NSExpression(forAggregate: [rhs.0.pqiExpression, rhs.1.pqiExpression]))
}

public func between<L, R>(_ lhs: L, _ rhs: (R, R)) -> PredicateBuilder
  where L: Expression & AnyComparable,
        R: Expression & TypeComparable
{
  compare(lhs, .between, NSExpression(forAggregate: [rhs.0.pqiExpression, rhs.1.pqiExpression]))
}

public func between<L, R>(_ lhs: L, _ rhs: ClosedRange<R>) -> PredicateBuilder
  where L: Expression & TypeComparable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  compare(lhs, .between, NSExpression(forAggregate: [rhs.lowerBound.pqiExpression, rhs.upperBound.pqiExpression]))
}

public func between<L, R>(_ lhs: L, _ rhs: ClosedRange<R>) -> PredicateBuilder
  where L: Expression & AnyComparable,
        R: Expression & TypeComparable
{
  compare(lhs, .between, NSExpression(forAggregate: [rhs.lowerBound.pqiExpression, rhs.upperBound.pqiExpression]))
}

public func <|> <L, R>(lhs: L, rhs: (R, R)) -> PredicateBuilder
  where L: Expression & TypeComparable & Variable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  between(lhs, rhs)
}

public func <|> <L, R>(lhs: L, rhs: (R, R)) -> PredicateBuilder
  where L: Expression & AnyComparable & Variable,
        R: Expression & TypeComparable
{
  between(lhs, rhs)
}

public func <|> <L, R>(lhs: L, rhs: ClosedRange<R>) -> PredicateBuilder
  where L: Expression & TypeComparable & Variable,
        R: Expression & TypeComparable,
        L.PQIComparisonType == R.PQIComparisonType
{
  between(lhs, rhs)
}

public func <|> <L, R>(lhs: L, rhs: ClosedRange<R>) -> PredicateBuilder
  where L: Expression & AnyComparable & Variable,
        R: Expression & TypeComparable
{
  between(lhs, rhs)
}
